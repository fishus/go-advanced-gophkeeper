// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Vault_RegisterUser_FullMethodName     = "/service.Vault/RegisterUser"
	Vault_LoginUser_FullMethodName        = "/service.Vault/LoginUser"
	Vault_AddVaultRecord_FullMethodName   = "/service.Vault/AddVaultRecord"
	Vault_ListVaultRecords_FullMethodName = "/service.Vault/ListVaultRecords"
)

// VaultClient is the client API for Vault service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VaultClient interface {
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error)
	LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error)
	AddVaultRecord(ctx context.Context, in *AddVaultRecordRequest, opts ...grpc.CallOption) (*AddVaultRecordResponse, error)
	ListVaultRecords(ctx context.Context, in *ListVaultRecordsRequest, opts ...grpc.CallOption) (*ListVaultRecordsResponse, error)
}

type vaultClient struct {
	cc grpc.ClientConnInterface
}

func NewVaultClient(cc grpc.ClientConnInterface) VaultClient {
	return &vaultClient{cc}
}

func (c *vaultClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterUserResponse)
	err := c.cc.Invoke(ctx, Vault_RegisterUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultClient) LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginUserResponse)
	err := c.cc.Invoke(ctx, Vault_LoginUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultClient) AddVaultRecord(ctx context.Context, in *AddVaultRecordRequest, opts ...grpc.CallOption) (*AddVaultRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddVaultRecordResponse)
	err := c.cc.Invoke(ctx, Vault_AddVaultRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultClient) ListVaultRecords(ctx context.Context, in *ListVaultRecordsRequest, opts ...grpc.CallOption) (*ListVaultRecordsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVaultRecordsResponse)
	err := c.cc.Invoke(ctx, Vault_ListVaultRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VaultServer is the server API for Vault service.
// All implementations must embed UnimplementedVaultServer
// for forward compatibility
type VaultServer interface {
	RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error)
	LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error)
	AddVaultRecord(context.Context, *AddVaultRecordRequest) (*AddVaultRecordResponse, error)
	ListVaultRecords(context.Context, *ListVaultRecordsRequest) (*ListVaultRecordsResponse, error)
	mustEmbedUnimplementedVaultServer()
}

// UnimplementedVaultServer must be embedded to have forward compatible implementations.
type UnimplementedVaultServer struct {
}

func (UnimplementedVaultServer) RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedVaultServer) LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedVaultServer) AddVaultRecord(context.Context, *AddVaultRecordRequest) (*AddVaultRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVaultRecord not implemented")
}
func (UnimplementedVaultServer) ListVaultRecords(context.Context, *ListVaultRecordsRequest) (*ListVaultRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVaultRecords not implemented")
}
func (UnimplementedVaultServer) mustEmbedUnimplementedVaultServer() {}

// UnsafeVaultServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VaultServer will
// result in compilation errors.
type UnsafeVaultServer interface {
	mustEmbedUnimplementedVaultServer()
}

func RegisterVaultServer(s grpc.ServiceRegistrar, srv VaultServer) {
	s.RegisterService(&Vault_ServiceDesc, srv)
}

func _Vault_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vault_RegisterUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServer).RegisterUser(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vault_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vault_LoginUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServer).LoginUser(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vault_AddVaultRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVaultRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServer).AddVaultRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vault_AddVaultRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServer).AddVaultRecord(ctx, req.(*AddVaultRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vault_ListVaultRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVaultRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServer).ListVaultRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vault_ListVaultRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServer).ListVaultRecords(ctx, req.(*ListVaultRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Vault_ServiceDesc is the grpc.ServiceDesc for Vault service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Vault_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.Vault",
	HandlerType: (*VaultServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _Vault_RegisterUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _Vault_LoginUser_Handler,
		},
		{
			MethodName: "AddVaultRecord",
			Handler:    _Vault_AddVaultRecord_Handler,
		},
		{
			MethodName: "ListVaultRecords",
			Handler:    _Vault_ListVaultRecords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
